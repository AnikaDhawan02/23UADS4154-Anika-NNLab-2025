# -*- coding: utf-8 -*-
"""Exp7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DbMqbOYe_lDYn4WZxGDyjOKJzAjdKT-b
"""

import kagglehub

# Download latest version
path = kagglehub.dataset_download("luisblanche/covidct")

print("Path to dataset files:", path)

import kagglehub

# Download latest version
path = kagglehub.dataset_download("luisblanche/covidct")

print("Path to dataset files:", path)

# Import Libraries
import torch
import torch.nn as nn
import torch.optim as optim
from torchvision import datasets, transforms, models
from torch.utils.data import DataLoader
import os

# Setup Device
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

# Data Preparation
data_dir =  "/kaggle/input/covidct"

transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize([0.485, 0.456, 0.406],
                         [0.229, 0.224, 0.225])
])

dataset = datasets.ImageFolder(root=data_dir, transform=transform)

train_size = int(0.8 * len(dataset))
val_size = len(dataset) - train_size
train_dataset, val_dataset = torch.utils.data.random_split(dataset, [train_size, val_size])

train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)
val_loader = DataLoader(val_dataset, batch_size=32, shuffle=False)

# Load Pretrained VGG16 Model
model = models.vgg16(pretrained=True)
model.classifier[6] = nn.Linear(4096, 2)  # Replace final FC layer for 2 classes
model = model.to(device)

# Loss and Optimizer
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.0001)

# Training Loop
num_epochs = 10
for epoch in range(num_epochs):
    model.train()
    running_loss = 0.0
    for images, labels in train_loader:
        images, labels = images.to(device), labels.to(device)
        outputs = model(images)
        loss = criterion(outputs, labels)
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()
        running_loss += loss.item()

    model.eval()
    correct = 0
    total = 0
    with torch.no_grad():
        for images, labels in val_loader:
            images, labels = images.to(device), labels.to(device)
            outputs = model(images)
            _, predicted = torch.max(outputs.data, 1)
            total += labels.size(0)
            correct += (predicted == labels).sum().item()

    accuracy = 100 * correct / total
    print(f"Epoch [{epoch+1}/{num_epochs}], Loss: {running_loss/len(train_loader):.4f}, Validation Accuracy: {accuracy:.2f}%")

# Save the Trained Model
os.makedirs('saved_models', exist_ok=True)
torch.save(model.state_dict(), 'saved_models/vgg16_covid_classifier.pth')